From e14b67850247107a0eb574a69b7ec62c02df9d07 Mon Sep 17 00:00:00 2001
From: Andrei Karas <akaras@inbox.ru>
Date: Sun, 6 Feb 2011 02:17:31 +0200
Subject: [PATCH 223/226] Add script commands get4, set4, get8, set8, get16,
 set16.

Also updated documentation.
---
 doc/scripts.txt  |  42 ++++++++++
 src/map/script.c | 252 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 294 insertions(+)

diff --git a/doc/scripts.txt b/doc/scripts.txt
index 09ee726..8e0ea0e 100644
--- a/doc/scripts.txt
+++ b/doc/scripts.txt
@@ -16,6 +16,27 @@ geta2 (variable, index)
     each value can be 0 - 3
 
 
+geta4 (variable, index)
+    get four bits at given index
+
+    index can 0 - 7
+    each value can be 0 - 7
+
+
+geta8 (variable, index)
+    get eight bits at given index
+
+    index can 0 - 3
+    each value can be 0 - 255
+
+
+geta16 (variable, index)
+    get sixteen bits at given index
+
+    index can 0 - 1
+    each value can be 0 - 65535
+
+
 getnpcclass [name]
     return npc class id
 
@@ -45,6 +66,27 @@ seta2 variable, index, value
     each value can be 0 - 3
 
 
+seta4 variable, index, value
+    set four bit at given index
+
+    index can 0 - 7
+    each value can be 0 - 7
+
+
+seta8 variable, index, value
+    set four bit at given index
+
+    index can 0 - 3
+    each value can be 0 - 255
+
+
+seta16 variable, index, value
+    set four bit at given index
+
+    index can 0 - 1
+    each value can be 0 - 65535
+
+
 setnpcclass [name,] n
     set npc class to given value
 
diff --git a/src/map/script.c b/src/map/script.c
index 6873ca2..373d23f 100644
--- a/src/map/script.c
+++ b/src/map/script.c
@@ -465,6 +465,12 @@ int  buildin_geta (struct script_state *st); // [4144]
 int  buildin_seta (struct script_state *st); // [4144]
 int  buildin_geta2 (struct script_state *st); // [4144]
 int  buildin_seta2 (struct script_state *st); // [4144]
+int  buildin_geta4 (struct script_state *st); // [4144]
+int  buildin_seta4 (struct script_state *st); // [4144]
+int  buildin_geta8 (struct script_state *st); // [4144]
+int  buildin_seta8 (struct script_state *st); // [4144]
+int  buildin_geta16 (struct script_state *st); // [4144]
+int  buildin_seta16 (struct script_state *st); // [4144]
 int  buildin_getclientversion (struct script_state *st); // [4144]
 int  buildin_g (struct script_state *st); // [4144]
 
@@ -990,6 +996,18 @@ struct
     {
     buildin_seta2, "seta2", "sii"}, // [4144]
     {
+    buildin_geta4, "geta4", "si"}, // [4144]
+    {
+    buildin_seta4, "seta4", "sii"}, // [4144]
+    {
+    buildin_geta8, "geta8", "si"}, // [4144]
+    {
+    buildin_seta8, "seta8", "sii"}, // [4144]
+    {
+    buildin_geta16, "geta16", "si"}, // [4144]
+    {
+    buildin_seta16, "seta16", "sii"}, // [4144]
+    {
     buildin_getclientversion, "getclientversion", "*"}, // [4144]
     {
     buildin_g, "g", "ss"}, // [4144]
@@ -9264,6 +9282,240 @@ BUILDIN_FUNC(geta2)
     return 0;
 }
 
+BUILDIN_FUNC(seta4)
+{
+    unsigned var;
+    char *varname;
+    int idx;
+    int val;
+    int tmp;
+    TBL_PC *sd = NULL;
+
+    int  num = st->stack->stack_data[st->start + 2].u.num;
+    varname = str_buf + str_data[num & 0x00ffffff].str;
+
+    if (!varname || strlen(varname) < 1 || varname[strlen(varname) - 1] == '$')
+        return 0;
+
+    if (not_server_variable(*varname))
+    {
+        sd = script_rid2sd(st);
+        if (sd == NULL)
+        {
+            ShowError("script:seta: no player attached for player variable '%s'\n", varname);
+            return 0;
+        }
+    }
+
+    var = (unsigned)get_val2(st, add_str(varname));
+
+    idx = script_getnum(st, 3);
+    if (idx < 0 || idx > 7)
+        return 0;
+
+    val = script_getnum(st, 4);
+    if (val < 0)
+        val = 0;
+    else if (val > 15)
+        val = 15;
+
+    tmp = var & (15 << (idx * 4));
+    var ^= tmp;
+
+    var = (var | (val << (idx * 4)));
+
+    setd_sub(sd, varname, 0, (void *)var);
+
+    return 0;
+}
+
+BUILDIN_FUNC(geta4)
+{
+    unsigned var;
+    char *varname;
+    int idx;
+    int val;
+
+    int  num = st->stack->stack_data[st->start + 2].u.num;
+    varname = str_buf + str_data[num & 0x00ffffff].str;
+
+    if (!varname || strlen(varname) < 1 || varname[strlen(varname) - 1] == '$')
+    {
+        script_pushint(st, 0);
+        return 0;
+    }
+
+    var = (unsigned)get_val2(st, add_str(varname));
+
+    idx = script_getnum(st, 3);
+    if (idx < 0 || idx > 7)
+    {
+        script_pushint(st, 0);
+        return 0;
+    }
+
+    val = (var & (15 << (idx * 4))) >> (idx * 4);
+    script_pushint(st, val);
+
+    return 0;
+}
+
+BUILDIN_FUNC(seta8)
+{
+    unsigned var;
+    char *varname;
+    int idx;
+    int val;
+    int tmp;
+    TBL_PC *sd = NULL;
+
+    int  num = st->stack->stack_data[st->start + 2].u.num;
+    varname = str_buf + str_data[num & 0x00ffffff].str;
+
+    if (!varname || strlen(varname) < 1 || varname[strlen(varname) - 1] == '$')
+        return 0;
+
+    if (not_server_variable(*varname))
+    {
+        sd = script_rid2sd(st);
+        if (sd == NULL)
+        {
+            ShowError("script:seta: no player attached for player variable '%s'\n", varname);
+            return 0;
+        }
+    }
+
+    var = (unsigned)get_val2(st, add_str(varname));
+
+    idx = script_getnum(st, 3);
+    if (idx < 0 || idx > 3)
+        return 0;
+
+    val = script_getnum(st, 4);
+    if (val < 0)
+        val = 0;
+    else if (val > 255)
+        val = 255;
+
+    tmp = var & (255 << (idx * 8));
+    var ^= tmp;
+
+    var = (var | (val << (idx * 8)));
+
+    setd_sub(sd, varname, 0, (void *)var);
+
+    return 0;
+}
+
+BUILDIN_FUNC(geta8)
+{
+    unsigned var;
+    char *varname;
+    int idx;
+    int val;
+
+    int  num = st->stack->stack_data[st->start + 2].u.num;
+    varname = str_buf + str_data[num & 0x00ffffff].str;
+
+    if (!varname || strlen(varname) < 1 || varname[strlen(varname) - 1] == '$')
+    {
+        script_pushint(st, 0);
+        return 0;
+    }
+
+    var = (unsigned)get_val2(st, add_str(varname));
+
+    idx = script_getnum(st, 3);
+    if (idx < 0 || idx > 3)
+    {
+        script_pushint(st, 0);
+        return 0;
+    }
+
+    val = (var & (255 << (idx * 8))) >> (idx * 8);
+    script_pushint(st, val);
+
+    return 0;
+}
+
+BUILDIN_FUNC(seta16)
+{
+    unsigned var;
+    char *varname;
+    int idx;
+    int val;
+    int tmp;
+    TBL_PC *sd = NULL;
+
+    int  num = st->stack->stack_data[st->start + 2].u.num;
+    varname = str_buf + str_data[num & 0x00ffffff].str;
+
+    if (!varname || strlen(varname) < 1 || varname[strlen(varname) - 1] == '$')
+        return 0;
+
+    if (not_server_variable(*varname))
+    {
+        sd = script_rid2sd(st);
+        if (sd == NULL)
+        {
+            ShowError("script:seta: no player attached for player variable '%s'\n", varname);
+            return 0;
+        }
+    }
+
+    var = (unsigned)get_val2(st, add_str(varname));
+
+    idx = script_getnum(st, 3);
+    if (idx < 0 || idx > 1)
+        return 0;
+
+    val = script_getnum(st, 4);
+    if (val < 0)
+        val = 0;
+    else if (val > 65535)
+        val = 65535;
+
+    tmp = var & (65535 << (idx * 16));
+    var ^= tmp;
+
+    var = (var | (val << (idx * 16)));
+
+    setd_sub(sd, varname, 0, (void *)var);
+
+    return 0;
+}
+
+BUILDIN_FUNC(geta16)
+{
+    unsigned var;
+    char *varname;
+    int idx;
+    int val;
+
+    int  num = st->stack->stack_data[st->start + 2].u.num;
+    varname = str_buf + str_data[num & 0x00ffffff].str;
+
+    if (!varname || strlen(varname) < 1 || varname[strlen(varname) - 1] == '$')
+    {
+        script_pushint(st, 0);
+        return 0;
+    }
+
+    var = (unsigned)get_val2(st, add_str(varname));
+
+    idx = script_getnum(st, 3);
+    if (idx < 0 || idx > 1)
+    {
+        script_pushint(st, 0);
+        return 0;
+    }
+
+    val = (var & (65535 << (idx * 16))) >> (idx * 16);
+    script_pushint(st, val);
+
+    return 0;
+}
+
 BUILDIN_FUNC(getclientversion)
 {
     TBL_PC *sd = NULL;
-- 
2.1.0

