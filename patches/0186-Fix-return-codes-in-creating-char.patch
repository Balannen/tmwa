From d7dec1ab6cc9af219a11c8fb189629c409b4860a Mon Sep 17 00:00:00 2001
From: Andrei Karas <akaras@inbox.ru>
Date: Wed, 12 Jan 2011 01:30:21 +0200
Subject: [PATCH 186/226] Fix return codes in creating char.

---
 src/char/char.c | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/src/char/char.c b/src/char/char.c
index 5b245c4..34d39ca 100644
--- a/src/char/char.c
+++ b/src/char/char.c
@@ -946,12 +946,12 @@ int make_new_char (int fd, unsigned char *dat)
     struct char_session_data *sd;
 
     if (!session[fd])
-        return 1;
+        return -1;
 
     sd = session[fd]->session_data;
 
     if (!sd)
-        return 1;
+        return -1;
 
     // remove control characters from the name
     dat[23] = '\0';
@@ -960,7 +960,7 @@ int make_new_char (int fd, unsigned char *dat)
         char_log
             ("Make new char error (control char received in the name): (connection #%d, account: %d)."
              RETCODE, fd, sd->account_id);
-        return 1;
+        return -1;
     }
 
     // Eliminate whitespace
@@ -973,7 +973,7 @@ int make_new_char (int fd, unsigned char *dat)
         char_log
             ("Make new char error (character name too small): (connection #%d, account: %d, name: '%s')."
              RETCODE, fd, sd->account_id, dat);
-        return 1;
+        return -1;
     }
 
     // Check Authorised letters/symbols in the name of the character
@@ -985,7 +985,7 @@ int make_new_char (int fd, unsigned char *dat)
                 char_log
                     ("Make new char error (invalid letter in the name): (connection #%d, account: %d), name: %s, invalid letter: %c."
                      RETCODE, fd, sd->account_id, dat, dat[i]);
-                return 2;
+                return -2;
             }
     }
     else if (char_name_option == 2)
@@ -996,7 +996,7 @@ int make_new_char (int fd, unsigned char *dat)
                 char_log
                     ("Make new char error (invalid letter in the name): (connection #%d, account: %d), name: %s, invalid letter: %c."
                      RETCODE, fd, sd->account_id, dat, dat[i]);
-                return 2;
+                return -2;
             }
     }                           // else, all letters/symbols are authorised (except control char removed before)
 
@@ -1008,7 +1008,7 @@ int make_new_char (int fd, unsigned char *dat)
              dat[26], dat[27], dat[28], dat[29],
              dat[24] + dat[25] + dat[26] + dat[27] + dat[28] + dat[29],
              dat[33], dat[31]);
-        return 3;
+        return -3;
     }
 
     if (dat[33] < min_hair_style || dat[33] >= max_hair_style || // hair style
@@ -1020,7 +1020,7 @@ int make_new_char (int fd, unsigned char *dat)
              dat[26], dat[27], dat[28], dat[29],
              dat[24] + dat[25] + dat[26] + dat[27] + dat[28] + dat[29],
              dat[33], dat[31]);
-        return 4;
+        return -4;
     }
 
     if (dat[30] >= MAX_SLOTS)
@@ -1031,7 +1031,7 @@ int make_new_char (int fd, unsigned char *dat)
              dat[26], dat[27], dat[28], dat[29],
              dat[24] + dat[25] + dat[26] + dat[27] + dat[28] + dat[29],
              dat[33], dat[31]);
-        return 1;
+        return -1;
     }
 
     // check individual stat value
@@ -1045,7 +1045,7 @@ int make_new_char (int fd, unsigned char *dat)
                  dat[26], dat[27], dat[28], dat[29],
                  dat[24] + dat[25] + dat[26] + dat[27] + dat[28] + dat[29],
                  dat[33], dat[31]);
-            return 1;
+            return -1;
         }
     }
 
@@ -1061,7 +1061,7 @@ int make_new_char (int fd, unsigned char *dat)
                  dat[24], dat[25], dat[26], dat[27], dat[28], dat[29],
                  dat[24] + dat[25] + dat[26] + dat[27] + dat[28] + dat[29],
                  dat[33], dat[31]);
-            return 1;
+            return -1;
         }
         if (char_dat[i].account_id == sd->account_id
             && char_dat[i].char_num == dat[30])
@@ -1072,7 +1072,7 @@ int make_new_char (int fd, unsigned char *dat)
                  dat[24], dat[25], dat[26], dat[27], dat[28], dat[29],
                  dat[24] + dat[25] + dat[26] + dat[27] + dat[28] + dat[29],
                  dat[33], dat[31]);
-            return 1;
+            return -1;
         }
     }
 
@@ -1084,7 +1084,7 @@ int make_new_char (int fd, unsigned char *dat)
              dat[24], dat[25], dat[26], dat[27], dat[28], dat[29],
              dat[24] + dat[25] + dat[26] + dat[27] + dat[28] + dat[29],
              dat[33], dat[31]);
-        return 1;
+        return -1;
     }
 
     if (char_num >= char_max)
@@ -3421,10 +3421,10 @@ int parse_char (int fd)
                 if (!sd || RFIFOREST (fd) < 37)
                     return 0;
                 i = make_new_char (fd, RFIFOP (fd, 2));
-                if (i != 0)
+                if (i < 0)
                 {
                     WFIFOW (fd, 0) = 0x6e;
-                    WFIFOB (fd, 2) = i;
+                    WFIFOB (fd, 2) = -i;
                     WFIFOSET (fd, 3);
                     RFIFOSKIP (fd, 37);
                     break;
-- 
2.1.0

